diff --git a/receiver/Receiver.cs b/receiver/Receiver.cs
index 9e9ae70..ea70f4b 100644
--- a/receiver/Receiver.cs
+++ b/receiver/Receiver.cs
@@ -76,4 +76,4 @@ public class Receiver
     }
 
     public void ReceivePixels() => multicastSocket.ReceiveAsync(pixelData);
-}
\ No newline at end of file
+}
diff --git a/viewer/ViewModels/MainWindowViewModel.cs b/viewer/ViewModels/MainWindowViewModel.cs
index 48a97db..d3f1a34 100644
--- a/viewer/ViewModels/MainWindowViewModel.cs
+++ b/viewer/ViewModels/MainWindowViewModel.cs
@@ -22,8 +22,16 @@ public partial class MainWindowViewModel : ViewModelBase
     public string AppTitleSecond => "Viewer";
     public int AppTitleFontSize => 0;
 
-    public double PercentWidth { get => percentWidth; set => percentWidth = value; }
-    public double PercentHeight { get => percentHeight; set => percentHeight = value; }
+    public double PercentWidth
+    {
+        get => percentWidth;
+        set => percentWidth = value;
+    }
+    public double PercentHeight
+    {
+        get => percentHeight;
+        set => percentHeight = value;
+    }
 
     private ObservableCollection<string> ipParts;
     public ObservableCollection<string> IpParts
@@ -48,21 +56,22 @@ public partial class MainWindowViewModel : ViewModelBase
     public string McastPortString
     {
         get => mcastPortString;
-        set => this.RaiseAndSetIfChanged(ref mcastPortString,  value);
+        set => this.RaiseAndSetIfChanged(ref mcastPortString, value);
     }
 
-    private string isVisible;
+    private ObservableCollection<bool> partsVisible;
 
-    public string IsVisible
+    public ObservableCollection<bool> PartsVisible
     {
-        get => isVisible;
-        set => this.RaiseAndSetIfChanged(ref isVisible, value);
+        get => partsVisible;
+        set => this.RaiseAndSetIfChanged(ref partsVisible, value);
     }
 
     public MainWindowViewModel()
     {
         ListItems = FetchItems();
         IpParts = new ObservableCollection<string> { "", "", "", "" };
+        PartsVisible = new ObservableCollection<bool> { true, false, false };
     }
 
     public ObservableCollection<AddressHolder> FetchItems()
@@ -71,23 +80,30 @@ public partial class MainWindowViewModel : ViewModelBase
         {
             new AddressHolder
             {
-                Name = "aaaa",
-                Ip = "127.0.0.1",
-                Port = 1111
+                Name = "teacher_main",
+                Ip = "239.0.0.0",
+                Port = 8001
             }
         };
     }
 
-    public void Select()
+    public async void SelectSession()
     {
         if (IPAddress.TryParse($"{IpParts[0]}.{IpParts[1]}.{IpParts[2]}.{IpParts[3]}", out mcastIP) && ushort.TryParse(McastPortString, out mcastPort))
         {
-            //FormPage.IsVisible = false;
-            //ViewPage.IsVisible = true;
-            //receivingTask = Task.Run(ReceiveBitmap);
-            //await receivingTask;
+            PartsVisible[0] = false;
+            PartsVisible[1] = false;
+            PartsVisible[2] = true;
+            receivingTask = Task.Run(ReceiveBitmap);
+            await receivingTask;
         }
     }
+
+    public void CancelSession()
+    {
+        PartsVisible[1] = true;
+        PartsVisible[2] = false;
+    }
     
     private async Task ReceiveBitmap()
     {
diff --git a/viewer/Views/MainWindow.axaml b/viewer/Views/MainWindow.axaml
index 4e8f872..f0106f5 100644
--- a/viewer/Views/MainWindow.axaml
+++ b/viewer/Views/MainWindow.axaml
@@ -18,7 +18,8 @@
     <Border Classes="window">
         <Grid>
             <!--#region FORM PAGE-->
-            <Grid Name="FormPage" RowDefinitions="Auto, *" Classes="body" Grid.Row="0">
+            <Grid Name="FormPage" RowDefinitions="Auto, *" Classes="body"
+            Grid.Row="0" IsVisible="{Binding PartsVisible[0]}">
                 <!--#region HEADER-->
                 <Border Classes="header" Grid.Row="0">
                     <StackPanel Classes="title">
@@ -47,14 +48,16 @@
                             </Grid>
                         </ListBoxItem>
                     </ListBox>
-                    <Button Classes="selectButton rounded" Content="SELECT" Grid.Row="1" Grid.Column="1" Command="{Binding Select}"/>
+                    <Button Classes="selectButton rounded" Content="SELECT"
+                    Grid.Row="1" Grid.Column="1" Command="{Binding SelectSession}"/>
                 </Grid>
                 <!--#endregion-->
             </Grid>
             <!--#endregion-->
 
             <!--#region List PAGE-->
-            <Grid Name="ListPage" RowDefinitions="Auto, *" Classes="body" Grid.Row="0" IsVisible="False">
+            <Grid Name="ListPage" RowDefinitions="Auto, *" Classes="body"
+            Grid.Row="0" IsVisible="{Binding PartsVisible[1]}">
                 <!--#region HEADER-->
                 <Border Classes="header" Grid.Row="0">
                     <StackPanel Classes="title">
@@ -83,14 +86,16 @@
                             </DataTemplate>
                         </ListBox.ItemTemplate>
                     </ListBox>
-                    <Button Classes="selectButton rounded" Content="SELECT" Grid.Row="1" Grid.Column="1" Command="{Binding Select}"/>
+                    <Button Classes="selectButton rounded" Content="SELECT"
+                    Grid.Row="1" Grid.Column="1" Command="{Binding SelectSession}"/>
                 </Grid>
                 <!--#endregion-->
             </Grid>
             <!--#endregion-->
 
             <!--#region VIEW PAGE-->
-            <Grid Name="ViewPage" RowDefinitions="Auto, *, Auto" Classes="body" Grid.Row="1" IsVisible="False">
+            <Grid Name="ViewPage" RowDefinitions="Auto, *, Auto" Classes="body"
+            Grid.Row="1" IsVisible="{Binding PartsVisible[2]}">
                 <!--#region HEADER-->
                 <Border Name="ViewHeader" Classes="header" Grid.Row="0"></Border>
                 <!--#endregion-->
@@ -109,7 +114,8 @@
                         <Path Data="{DynamicResource AudioImage}"/>
                     </Button>
 
-                    <Button Classes="cancelButton roundedMax" Content="Cancel" Click="Cancel_OnClick" Grid.Column="2" HorizontalAlignment="Center">
+                    <Button Classes="cancelButton roundedMax" Content="Cancel"
+                    Click="Cancel_OnClick" Command="{Binding CancelSession}" Grid.Column="2" HorizontalAlignment="Center">
                         <Path Data="{DynamicResource CancelImage}"/>
                     </Button>
                     
@@ -124,4 +130,4 @@
             <Button Name="ThemeSwitch" Classes="roundedMax" Click="SwitchTheme_OnClick"/>
         </Grid>
     </Border>
-</Window>
\ No newline at end of file
+</Window>
diff --git a/viewer/Views/MainWindow.axaml.cs b/viewer/Views/MainWindow.axaml.cs
index f4dea74..2bb7609 100644
--- a/viewer/Views/MainWindow.axaml.cs
+++ b/viewer/Views/MainWindow.axaml.cs
@@ -52,8 +52,6 @@ public partial class MainWindow : Window
 
     private void Cancel_OnClick(object? sender, RoutedEventArgs e)
     {
-        FormPage.IsVisible = true;
-        ViewPage.IsVisible = false;
         SetWindowNormal();
     }
 
@@ -92,4 +90,4 @@ public partial class MainWindow : Window
         FunctionButtons.Classes.Add("fullScreen");
         ViewHeader.IsVisible = false;
     }
-}
\ No newline at end of file
+}
